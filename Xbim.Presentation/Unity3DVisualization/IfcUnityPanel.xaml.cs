using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using Xbim.Common.Geometry;
using Xbim.Ifc;
using Xbim.Presentation.LayerStyling;

namespace Xbim.Presentation.Unity3DVisualization
{
    // todo: the whole class needs to be reviewed
    /// <summary>
    /// Panel to visualize IFC in Unity
    /// </summary>
    public partial class IfcUnityPanel : UserControl
    {
        /// <summary>
        /// IfcStore with the model to visualize
        /// </summary>
        public IfcStore Model
        {
            get { return (IfcStore)GetValue(ModelProperty); }
            set { SetValue(ModelProperty, value); }
        }

        // Using a DependencyProperty as the backing store for Model.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty ModelProperty =
            DependencyProperty.Register("Model", typeof(IfcStore), typeof(IfcUnityPanel),
                new FrameworkPropertyMetadata(null, FrameworkPropertyMetadataOptions.Inherits,
                    OnModelChanged));

        private static void OnModelChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            IfcUnityPanel unityPanel = d as IfcUnityPanel;
            unityPanel.ReloadModel();
        }

        /// <summary>
        /// Path to the app generated by unity
        /// </summary>
        public string UnityApplicationPath 
        { 
            get
            {
                if (this.InternalPanel != null)
                {
                    return this.InternalPanel.UnityApplicationPath;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (this.InternalPanel != null)
                {
                    this.InternalPanel.UnityApplicationPath = value;
                }
            }
        }

        /// <summary>
        /// working directory of the unity app
        /// </summary>
        public string UnityWorkingDirectory
        { 
            get
            {
                if (this.InternalPanel != null)
                {
                    return this.InternalPanel.UnityWorkingDirectory;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (this.InternalPanel != null)
                {
                    this.InternalPanel.UnityWorkingDirectory = value;
                }
            }
        }

        /// <summary>
        /// Port number for the incoming communication
        /// </summary>
        public int PortNumberIn 
        { 
            get
            {
                if (this.InternalPanel != null)
                {
                    return this.InternalPanel.PortNumberIn;
                }
                else
                {
                    return -1;
                }
            }

            set
            {
                if (this.InternalPanel != null)
                {
                    this.InternalPanel.PortNumberIn = value;
                }
            }
        }

        /// <summary>
        /// Port number for the outgoing communication
        /// </summary>
        public int PortNumberOut 
        { 
            get
            {
                if (this.InternalPanel != null)
                {
                    return this.InternalPanel.PortNumberOut;
                }
                else
                {
                    return -1;
                }
            }

            set
            {
                if (this.InternalPanel != null)
                {
                    this.InternalPanel.PortNumberOut = value;
                }
            }
        }

        /// <summary>
        /// Shows if the underlaying unity process is ready. <seealso cref="UnityIntegrationToolbox.UnityHost.UnityReady"/>
        /// </summary>
        public bool UnityReady
        {
            get
            {
                return this.InternalPanel != null && this.InternalPanel.UnityReady;
            }
        }

        /// <summary>
        /// Generates a new panel
        /// </summary>
        public IfcUnityPanel()
        {
            this.InitializeComponent();
        }

        /// <summary>
        /// Reloads the entire model
        /// </summary>
        public void ReloadModel()
        {
            this.ClearModelView();
            this.LoadModelView();
        }

        /// <summary>
        /// Load the current model
        /// </summary>
        public void LoadModelView()
        {
            if (this.Model != null)
            {
                using (var geometryStore = this.Model.GeometryStore)
                {
                    using (IGeometryStoreReader geomReader = geometryStore.BeginRead())
                    {
                        HashSet<short> excludedTypes = this.Model.DefaultExclusions(null);
                        IEnumerable<XbimShapeInstance> shapeInstances = GetShapeInstancesToRender(geomReader, excludedTypes);
                        foreach (XbimShapeInstance shape in shapeInstances)
                        {
                            IXbimShapeGeometryData shapeGeom = geomReader.ShapeGeometry(shape.ShapeGeometryLabel);
                            DamageModelingTools.UnityCommunication.Messaging.GeometricEntityData objectData = new DamageModelingTools.UnityCommunication.Messaging.GeometricEntityData()
                            {
                                ObjectID = shape.IfcProductLabel.ToString()
                            };
                            XbimModelPositioning modelPositioning = new XbimModelPositioning(this.Model.ReferencingModel);
                            var transform = XbimMatrix3D.Multiply(shape.Transformation, modelPositioning.Transform);
                            objectData.Read(shapeGeom.ShapeData, transform);
                            this.InternalPanel.SendMessageToUnity(DamageModelingTools.UnityCommunication.Messaging.MessageType.ADD, objectData);
                        }

                        System.Threading.Thread.Sleep(500);
                        this.InternalPanel.SendMessageToUnity(DamageModelingTools.UnityCommunication.Messaging.MessageType.LOADING_FINISHED, null);
                    }
                } 
            }
        }

        /// <summary>
        /// Send the message to clear the model
        /// </summary>
        public void ClearModelView()
        {
            this.InternalPanel.SendMessageToUnity(DamageModelingTools.UnityCommunication.Messaging.MessageType.CLEAR, null);
        }

        protected IEnumerable<XbimShapeInstance> GetShapeInstancesToRender(IGeometryStoreReader geomReader, HashSet<short> excludedTypes)
        {
            var shapeInstances = geomReader.ShapeInstances
                .Where(s => s.RepresentationType == XbimGeometryRepresentationType.OpeningsAndAdditionsIncluded
                            &&
                            !excludedTypes.Contains(s.IfcTypeId));
            return shapeInstances;
        }
    }
}
